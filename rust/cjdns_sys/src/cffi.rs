/* automatically generated by rust-bindgen 0.55.1 */

#![allow(non_snake_case)]
#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(clippy::enum_variant_names)]
#![allow(non_upper_case_globals)]
use crate::rtypes::*;

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 36;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const CryptoAuth_DEFAULT_RESET_AFTER_INACTIVITY_SECONDS: u32 = 60;
pub const CryptoAuth_DEFAULT_SETUP_RESET_AFTER_INACTIVITY_SECONDS: u32 = 10;
pub const CryptoHeader_Challenge_SIZE: u32 = 12;
pub const CryptoHeader_Challenge_KEYSIZE: u32 = 8;
pub const CryptoHeader_SIZE: u32 = 120;
pub const Sockaddr_flags_BCAST: u32 = 1;
pub const Sockaddr_flags_PREFIX: u32 = 2;
pub const Sockaddr_PLATFORM: u32 = 0;
pub const Sockaddr_HANDLE: u32 = 1;
pub const Sockaddr_OVERHEAD: u32 = 8;
pub const Sockaddr_MAXSIZE: u32 = 128;
pub const Sockaddr_addrHandle_INVALID: u32 = 4294967295;
pub const Version_CURRENT_PROTOCOL: u32 = 22;
pub const Version_MINIMUM_COMPATIBLE: u32 = 20;
pub const Version_DEFAULT_ASSUMPTION: u32 = 20;
pub const SwitchHeader_SIZE: u32 = 12;
pub const SwitchHeader_CURRENT_VERSION: u32 = 1;
pub const RouteHeader_flags_INCOMING: u32 = 1;
pub const RouteHeader_flags_CTRLMSG: u32 = 2;
pub const RouteHeader_flags_PATHFINDER: u32 = 4;
pub const RouteHeader_SIZE: u32 = 68;
pub const DataHeader_SIZE: u32 = 4;
pub const DataHeader_CURRENT_VERSION: u32 = 1;
pub const Control_ERROR: u32 = 2;
pub const Control_Error_HEADER_SIZE: u32 = 4;
pub const Control_Error_MIN_SIZE: u32 = 20;
pub const Control_Error_MAX_SIZE: u32 = 256;
pub const Control_Ping_HEADER_SIZE: u32 = 8;
pub const Control_Ping_MIN_SIZE: u32 = 8;
pub const Control_Ping_MAX_SIZE: u32 = 256;
pub const Control_Pong_HEADER_SIZE: u32 = 8;
pub const Control_Pong_MIN_SIZE: u32 = 8;
pub const Control_Pong_MAX_SIZE: u32 = 256;
pub const Control_KeyPing_HEADER_SIZE: u32 = 40;
pub const Control_KeyPing_MAX_SIZE: u32 = 104;
pub const Control_KeyPong_HEADER_SIZE: u32 = 40;
pub const Control_KeyPong_MAX_SIZE: u32 = 104;
pub const Control_GetSnode_HEADER_SIZE: u32 = 56;
pub const Control_RPath_HEADER_SIZE: u32 = 16;
pub const Control_LlAddr_HEADER_SIZE: u32 = 40;
pub const Control_Header_SIZE: u32 = 4;
pub const PFChan_Node_SIZE: u32 = 64;
pub const PFChan_Msg_MIN_SIZE: u32 = 72;
pub const PFChan_CtrlMsg_MIN_SIZE: u32 = 72;
pub const PFChan_Ping_SIZE: u32 = 8;
pub const PFChan_Pathfinder_Connect_SIZE: u32 = 72;
pub const PFChan_Pathfinder_Superiority_SIZE: u32 = 4;
pub const PFChan_LinkState_Entry_SIZE: u32 = 32;
pub const PFChan_Core_SearchReq_SIZE: u32 = 24;
pub const PFChan_Core_Pathfinder_SIZE: u32 = 72;
pub const PFChan_Core_Connect_SIZE: u32 = 40;
pub const PFChan_Core_SwitchErr_MIN_SIZE: u32 = 48;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type Dict = *mut Dict_Entry;
pub type List = *mut List_Item;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct String_s {
    pub len: usize,
    pub bytes: *mut ::std::os::raw::c_char,
}
impl Default for String_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type String = String_s;
pub type String_t = String;
pub type Dict_t = Dict;
pub type List_t = List;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum Object_Type {
    Object_INTEGER = 0,
    Object_STRING = 1,
    Object_LIST = 2,
    Object_DICT = 3,
    Object_UNPARSABLE = 4,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Object {
    pub type_: Object_Type,
    pub as_: Object__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Object__bindgen_ty_1 {
    pub number: i64,
    pub string: *mut String_t,
    pub list: *mut List_t,
    pub dictionary: *mut Dict_t,
    _bindgen_union_align: u64,
}
impl Default for Object__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl Default for Object {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Object_t = Object;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Allocator {
    _unused: [u8; 0],
}
pub type Allocator_t = Allocator;
pub type List_Item_t = List_Item;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct List_Item {
    pub next: *mut List_Item_t,
    pub elem: *mut Object,
}
impl Default for List_Item {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Dict_Entry_t = Dict_Entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dict_Entry {
    pub next: *mut Dict_Entry_t,
    pub key: *mut String,
    pub val: *mut Object,
}
impl Default for Dict_Entry {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Iface_t = Iface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Message {
    pub _length: i32,
    pub _padding: i32,
    pub _msgbytes: *mut u8,
    pub _capacity: i32,
    pub _adLen: i32,
    pub _ad: *mut u8,
    pub _associatedFd: ::std::os::raw::c_int,
    pub currentIface: *mut Iface,
    pub _alloc: *mut Allocator,
}
impl Default for Message {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Message_t = Message;
extern "C" {
    pub fn Message_new_fromRust(
        messageLength: u32,
        amountOfPadding: u32,
        alloc: *mut Allocator,
    ) -> *mut Message;
}
pub type Iface_Callback = ::std::option::Option<
    unsafe extern "C" fn(message: *mut Message_t, thisInterface: *mut Iface) -> *mut RTypes_Error_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Iface {
    pub send: Iface_Callback,
    pub currentMsg: *mut Message_t,
    pub connectedIf: *mut Iface,
    pub Identity_verifier: usize,
}
impl Default for Iface {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn Iface_incoming_fromRust(
        message: *mut Message_t,
        thisInterface: *mut Iface,
    ) -> *mut RTypes_Error_t;
}
extern "C" {
    pub fn RustIface_gotIncoming_fromRust();
}
extern "C" {
    pub fn RustIface_gotOutgoing_fromRust();
}
extern "C" {
    pub fn RustIface_dropped_fromRust();
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum Log_Level {
    Log_Level_KEYS = 0,
    Log_Level_DEBUG = 1,
    Log_Level_INFO = 2,
    Log_Level_WARN = 3,
    Log_Level_ERROR = 4,
    Log_Level_CRITICAL = 5,
    Log_Level_INVALID = 6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Log {
    _unused: [u8; 0],
}
pub type Log_t = Log;
extern "C" {
    pub fn Log_print_fromRust(
        log: *mut Log,
        lvl: Log_Level,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        msg: *const ::std::os::raw::c_char,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Random {
    _unused: [u8; 0],
}
pub type Random_t = Random;
extern "C" {
    pub fn Random_bytes_fromRust(rand: *mut Random_t, location: *mut u8, count: u64);
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum CryptoAuth_addUser_Res {
    CryptoAuth_addUser_DUPLICATE = -3,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Sockaddr {
    pub addrLen: u16,
    pub flags: u8,
    pub type_: u8,
    pub prefix: u8,
    pub pad1: u8,
    pub pad2: u16,
}
pub type Sockaddr_t = Sockaddr;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Sockaddr_storage {
    pub addr: Sockaddr_t,
    pub nativeAddr: [u64; 16usize],
}
extern "C" {
    pub static Sockaddr_LOOPBACK_be: *const Sockaddr_t;
}
extern "C" {
    pub static Sockaddr_LOOPBACK_le: *const Sockaddr_t;
}
extern "C" {
    pub static Sockaddr_LOOPBACK6: *const Sockaddr_t;
}
extern "C" {
    pub fn Sockaddr_addrHandle_fromRust(addr: *const Sockaddr_t) -> u32;
}
extern "C" {
    pub fn Sockaddr_getPort_fromRust(sockaddr: *const Sockaddr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Sockaddr_setPort_fromRust(sockaddr: *mut Sockaddr, port: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static Sockaddr_AF_INET: ::std::os::raw::c_int;
}
extern "C" {
    pub static Sockaddr_AF_INET6: ::std::os::raw::c_int;
}
extern "C" {
    pub fn Sockaddr_getFamily_fromRust(sockaddr: *const Sockaddr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Sockaddr_asIp6_fromRust(addrOut: *mut u8, sockaddr: *const Sockaddr);
}
extern "C" {
    pub fn Sockaddr_initFromBytes_fromRust(
        out: *mut Sockaddr_storage,
        bytes: *const u8,
        addrFamily: ::std::os::raw::c_int,
    ) -> *mut Sockaddr_t;
}
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct SwitchHeader {
    pub label_be: u64,
    pub congestAndSuppressErrors: u8,
    pub versionAndLabelShift: u8,
    pub trafficClass_be: u16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct RouteHeader {
    pub publicKey: [u8; 32usize],
    pub sh: SwitchHeader,
    pub version_be: u32,
    pub flags: u8,
    pub unused: u8,
    pub alsoUnused: u16,
    pub ip6: [u8; 16usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct DataHeader {
    pub versionAndFlags: u8,
    pub unused: u8,
    pub contentType_be: u16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Control_Error {
    pub errorType_be: u32,
    pub cause: SwitchHeader,
    pub causeHandle: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Control_LlAddr_Payload {
    pub type_: u8,
    pub len: u8,
}
pub type Control_LlAddr_Payload_t = Control_LlAddr_Payload;
pub const Control_LlAddr_Udp4_TYPE: u8 = 1;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Control_LlAddr_Udp4 {
    pub type_: u8,
    pub len: u8,
    pub port_be: u16,
    pub addr: [u8; 4usize],
}
pub type Control_LlAddr_Udp4_t = Control_LlAddr_Udp4;
pub const Control_LlAddr_Udp6_TYPE: u8 = 2;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Control_LlAddr_Udp6 {
    pub type_: u8,
    pub len: u8,
    pub port_be: u16,
    pub addr: [u8; 16usize],
}
pub type Control_LlAddr_Udp6_t = Control_LlAddr_Udp6;
pub const Control_LlAddr_Other_TYPE: u8 = 3;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Control_LlAddr_Other {
    pub type_: u8,
    pub len: u8,
    pub sockaddrHeader: [u8; 30usize],
}
pub type Control_LlAddr_Other_t = Control_LlAddr_Other;
pub const Control_LlAddr_REPLY_MAGIC: u32 = 1918987372;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Control_LlAddr {
    pub magic: u32,
    pub version_be: u32,
    pub addr: Control_LlAddr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Control_LlAddr__bindgen_ty_1 {
    pub payload: Control_LlAddr_Payload_t,
    pub udp4: Control_LlAddr_Udp4_t,
    pub udp6: Control_LlAddr_Udp6_t,
    pub other: Control_LlAddr_Other_t,
    _bindgen_union_align: [u16; 16usize],
}
impl Default for Control_LlAddr__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl Default for Control_LlAddr {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Control_LlAddr_t = Control_LlAddr;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Control_Header {
    pub checksum_be: u16,
    pub type_be: u16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct PFChan_Node {
    pub ip6: [u8; 16usize],
    pub publicKey: [u8; 32usize],
    pub path_be: u64,
    pub metric_be: u32,
    pub version_be: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct PFChan_Msg {
    pub route: RouteHeader,
    pub data: DataHeader,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct PFChan_Ping {
    pub cookie: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PFChan_Pathfinder_Connect {
    pub superiority_be: u32,
    pub version_be: u32,
    pub userAgent: [u8; 64usize],
}
impl Default for PFChan_Pathfinder_Connect {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct PFChan_Pathfinder_Superiority {
    pub superiority_be: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct PFChan_Pathfinder_ConnectPeer {
    pub ip: [u8; 16usize],
    pub pubkey: [u8; 32usize],
    pub login: [u8; 16usize],
    pub password: [u8; 24usize],
    pub version: u32,
    pub port: u16,
    pub _pad: u16,
}
pub type PFChan_Pathfinder_ConnectPeer_t = PFChan_Pathfinder_ConnectPeer;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PFChan_Pathfinder {
    PFChan_Pathfinder__TOO_LOW = 511,
    PFChan_Pathfinder_CONNECT = 512,
    PFChan_Pathfinder_SUPERIORITY = 513,
    PFChan_Pathfinder_NODE = 514,
    PFChan_Pathfinder_SENDMSG = 515,
    PFChan_Pathfinder_PING = 516,
    PFChan_Pathfinder_PONG = 517,
    PFChan_Pathfinder_SESSIONS = 518,
    PFChan_Pathfinder_PEERS = 519,
    PFChan_Pathfinder_PATHFINDERS = 520,
    PFChan_Pathfinder_CTRL_SENDMSG = 521,
    PFChan_Pathfinder_SNODE = 522,
    PFChan_Pathfinder_CONNECT_PEER = 523,
    PFChan_Pathfinder__TOO_HIGH = 524,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PFChan_FromPathfinder {
    pub event_be: PFChan_Pathfinder,
    pub target_be: u8,
    pub content: PFChan_FromPathfinder__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PFChan_FromPathfinder__bindgen_ty_1 {
    pub connect: PFChan_Pathfinder_Connect,
    pub superiority: PFChan_Pathfinder_Superiority,
    pub node: PFChan_Node,
    pub sendmsg: PFChan_Msg,
    pub ping: PFChan_Ping,
    pub pong: PFChan_Ping,
    pub cp: PFChan_Pathfinder_ConnectPeer_t,
    pub bytes: [u8; 1usize],
    _bindgen_union_align: [u64; 12usize],
}
impl Default for PFChan_FromPathfinder__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl Default for PFChan_FromPathfinder {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFChan_FromPathfinder_t = PFChan_FromPathfinder;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PFChan_Core {
    PFChan_Core__TOO_LOW = 1023,
    PFChan_Core_CONNECT = 1024,
    PFChan_Core_PATHFINDER = 1025,
    PFChan_Core_PATHFINDER_GONE = 1026,
    PFChan_Core_SWITCH_ERR = 1027,
    PFChan_Core_SEARCH_REQ = 1028,
    PFChan_Core_PEER = 1029,
    PFChan_Core_PEER_GONE = 1030,
    PFChan_Core_SESSION = 1031,
    PFChan_Core_SESSION_ENDED = 1032,
    PFChan_Core_DISCOVERED_PATH = 1033,
    PFChan_Core_MSG = 1034,
    PFChan_Core_PING = 1035,
    PFChan_Core_PONG = 1036,
    PFChan_Core_CTRL_MSG = 1037,
    PFChan_Core_UNSETUP_SESSION = 1038,
    PFChan_Core_LINK_STATE = 1039,
    PFChan_Core__TOO_HIGH = 1040,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct PFChan_LinkState_Entry {
    pub peerLabel: u64,
    pub sumOfPackets: u64,
    pub sumOfDrops: u64,
    pub sumOfKb: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct PFChan_Core_SearchReq {
    pub ipv6: [u8; 16usize],
    pub pad: u32,
    pub version_be: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PFChan_Core_Pathfinder {
    pub superiority_be: u32,
    pub pathfinderId_be: u32,
    pub userAgent: [u8; 64usize],
}
impl Default for PFChan_Core_Pathfinder {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct PFChan_Core_Connect {
    pub version_be: u32,
    pub pathfinderId_be: u32,
    pub publicKey: [u8; 32usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct PFChan_Core_SwitchErr {
    pub sh: SwitchHeader,
    pub ctrlHeader: Control_Header,
    pub ctrlErr: Control_Error,
    pub shAtErrorHop: SwitchHeader,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PFChan_FromCore {
    pub event_be: PFChan_Core,
    pub target_be: u8,
    pub content: PFChan_FromCore__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PFChan_FromCore__bindgen_ty_1 {
    pub connect: PFChan_Core_Connect,
    pub pathfinder: PFChan_Core_Pathfinder,
    pub pathfinderGone: PFChan_Core_Pathfinder,
    pub switchErr: PFChan_Core_SwitchErr,
    pub searchReq: PFChan_Core_SearchReq,
    pub peer: PFChan_Node,
    pub peerGone: PFChan_Node,
    pub session: PFChan_Node,
    pub sessionEnded: PFChan_Node,
    pub discoveredPath: PFChan_Node,
    pub msg: PFChan_Msg,
    pub ping: PFChan_Ping,
    pub pong: PFChan_Ping,
    pub linkState: PFChan_LinkState_Entry,
    pub bytes: [u8; 4usize],
    _bindgen_union_align: [u64; 9usize],
}
impl Default for PFChan_FromCore__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl Default for PFChan_FromCore {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFChan_FromCore_t = PFChan_FromCore;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum RBindings_Version {
    RBindings_Version_CurrentProtocol = 22,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RBindings_Whitelist {
    pub b: Iface_t,
    pub c: CryptoAuth_addUser_Res,
    pub d: Message_t,
    pub e: List_Item_t,
    pub ee: Dict_Entry_t,
    pub eee: Object_t,
    pub f: *mut Log_t,
    pub g: RBindings_Version,
    pub h: Sockaddr_t,
    pub i: PFChan_FromPathfinder_t,
    pub ii: PFChan_FromCore_t,
    pub j: Log_Level,
    pub k: *mut Allocator_t,
    pub l: Sockaddr_storage,
    pub m: Sockaddr,
    pub n: *mut Random_t,
    pub o: Control_LlAddr_t,
}
impl Default for RBindings_Whitelist {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
