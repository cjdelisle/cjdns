#!/usr/bin/env node
/* -*- Mode:Js */
/* vim: set expandtab ts=4 sw=4: */
/*
 * You may redistribute this program and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var Cjdns = require('../contrib/nodejs/cjdnsadmin/cjdnsadmin');
var PublicToIp6 = require('./lib/publicToIp6');

var distance = function (myAddr, theirAddr) {
    var myInt = Number('0x' + myAddr.substring(20, 28).replace(':', ''));
    var theirInt = Number('0x' + theirAddr.substring(20, 28).replace(':', ''));
    var out = (myInt ^ theirInt).toString(16);
    while (out.length < 7) { out = '0'+out; }
    return out;
};

Cjdns.connectWithAdminInfo(function (cjdns) {

    var list = [];

    var again = function (i) {
        cjdns.NodeStore_dumpTable(i, function (err, table) {
            if (err) { throw err; }
            var j;
            for (j = 0; j < table.routingTable.length; j++) {
                var r = table.routingTable[j];
                list.push(r);
            }
            if (j) {
                again(i+1);
            } else {
                console.log('ver       path                               addr' +
                            '                               kDist  physdist lastPinged');
                list.sort(function (a,b) { return a.path < b.path ? -1 : 1; });
                var myAddr = PublicToIp6.convert(list[0].addr.replace(/^([^\.]*\.){5}/,''));
                list.forEach(function (r) {
                    var theirAddr = PublicToIp6.convert(r.addr.replace(/^([^\.]*\.){5}/,''));
                    var dist = distance(myAddr, theirAddr);
                    console.log(r.addr + ' ' + dist + ' ' + r.link + ' ' + r.time);
                });

                console.log(table.count + ' nodes ' + table.peers + ' peers');
                cjdns.disconnect();
            }
        });
    };
    again(0);

});
