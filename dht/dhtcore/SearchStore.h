/* vim: set expandtab ts=4 sw=4: */
/*
 * You may redistribute this program and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef SearchStore_H
#define SearchStore_H

#include "crypto/random/Random.h"
#include "dht/Address.h"
#include "memory/Allocator.h"
#include "benc/Object.h"
#include "util/log/Log.h"
#include "util/AverageRoller.h"

#include <stdint.h>
#include "util/events/EventBase.h"

/*--------------------Constants--------------------*/

/**
 * The number of nodes which will be held in a buffer when performing a search.
 * It is important that this number is large enough because when a search yields results, the
 * nodes which helped in get to those results have their reach number recalculated and if
 * they are prematurely evicted, they will not have their number recalculated.
 */
#define SearchStore_SEARCH_NODES 256

/** Maximum number of concurrent searches. */
#define SearchStore_MAX_SEARCHES 8


#if (SearchStore_SEARCH_NODES & (SearchStore_SEARCH_NODES - 1))
  #error "SearchStore_SEARCH_NODES must be a power of 2"
#endif
#if (SearchStore_MAX_SEARCHES & (SearchStore_MAX_SEARCHES - 1))
  #error "SearchStore_MAX_SEARCHES must be a power of 2"
#endif

/*--------------------Structures--------------------*/

struct SearchStore
{
    /** The means of getting memory to store each search. */
    struct Allocator* const allocator;

    /**
     * An array of pointers to all search slots.
     * When a search completes, it will be freed and its pointer will be set to NULL.
     */
    struct SearchStore_Search* searches[SearchStore_MAX_SEARCHES];

    /** Averager for milliseconds wait for request turnaround. */
    struct AverageRoller* const gmrtRoller;

    /** Libevent event base for getting current time. */
    struct EventBase* const eventBase;

    struct Random* const rand;

    struct Log* const logger;
};

/** Represents a single search */
struct SearchStore_Search
{
    struct SearchStore* const store;
    struct Allocator* const alloc;
    void* callbackContext;
};

struct SearchStore_Node;
struct SearchStore_Node
{
    /** Number of milliseconds since the epoch when the search request was sent to this node. */
    uint64_t timeOfRequest;

    /** The txid for communicating with this node. */
    String* txid;

    /** The search. */
    struct SearchStore_Search* search;

    /** The address of this node. */
    struct Address address;
};


/*--------------------Prototypes--------------------*/

/**
 * Create a new SearchStore.
 *
 * @param allocator the means of aquiring memory for the new store.
 * @param gmrtRoller averager of the mean response time for all nodes.
 * @param eventBase the libevent event base for getting current time.
 * @param logger
 */
struct SearchStore* SearchStore_new(struct Allocator* allocator,
                                    struct AverageRoller* gmrtRoller,
                                    struct EventBase* eventBase,
                                    struct Random* rand,
                                    struct Log* logger);

/**
 * Create a new search.
 *
 * @param searchTarget the ID of the thing which we are searching for.
 * @param store the SearchStore to allocate the search in.
 * @param alloc the allocator to use for allocating this search.
 * @return the new search or NULL if MAX_SEARCHES are already running.
 */
struct SearchStore_Search* SearchStore_newSearch(uint8_t searchTarget[16],
                                                 struct SearchStore* store,
                                                 struct Allocator* alloc);

/**
 * Get a node from the search store.
 *
 * @param txid the transaction ID which was generated by SearchStore_tidForNode().
 * @param store the search store where the node is.
 * @return a pointer to the node.
 */
struct SearchStore_Node* SearchStore_getNode(String* txid, struct SearchStore* store);

/**
 * Add a node to a search.
 *
 * @param address the address of the node to add.
 * @param search the search to add the node to.
 * @return -1 if this node has already been asked as part of this search, 0 otherwise.
 */
int SearchStore_addNodeToSearch(struct Address* addr, struct SearchStore_Search* search);

/**
 * Log that a node has sent us a valid reply.
 *
 * @param node the node which sent the reply.
 * @return number of milliseconds between when the request was sent and when the reply was received.
 */
uint32_t SearchStore_replyReceived(struct SearchStore_Node* node);

/**
 * Get the next node to ask in this search.
 * This will get the last node to be added to the search which has not been sent a request yet.
 *
 * @param search the search to get the node for.
 * @param allocator the allocator to use for allocating the memory to store the output.
 * @return the node which is copied from the storage to the allocated space.
 */
struct SearchStore_Node* SearchStore_getNextNode(struct SearchStore_Search* search);

#endif
